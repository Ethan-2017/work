Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)
 
        modified:   contrib/mesos/pkg/scheduler/meta/annotations.go
        modified:   contrib/mesos/pkg/scheduler/podtask/pod_task.go
        modified:   contrib/mesos/pkg/scheduler/podtask/procurement.go
        modified:   contrib/mesos/pkg/scheduler/podtask/procurement_test.go
        modified:   contrib/mesos/pkg/scheduler/service/service.go
 
Untracked files:
  (use "git add <file>..." to include in what will be committed)
 
        diff
 
root@ma1demo3:~/gyliu/jay-work/dcos/kubernetes.new/kubernetes# cat diff
diff --git a/contrib/mesos/pkg/scheduler/meta/annotations.go b/contrib/mesos/pkg/scheduler/meta/annotations.go
index 7d051e7..02676de 100644
--- a/contrib/mesos/pkg/scheduler/meta/annotations.go
+++ b/contrib/mesos/pkg/scheduler/meta/annotations.go
@@ -38,4 +38,5 @@ const (
        ContainerPortKeyFormat   = Namespace + "/containerPort_%s_%s_%d"
        StaticPodFilenameKey     = Namespace + "/staticPodFilename"
        RolesKey                 = Namespace + "/roles"
+       Roles2Key                = Namespace + "/revocable"
 )
diff --git a/contrib/mesos/pkg/scheduler/podtask/pod_task.go b/contrib/mesos/pkg/scheduler/podtask/pod_task.go
index 362169b..4ac6075 100644
--- a/contrib/mesos/pkg/scheduler/podtask/pod_task.go
+++ b/contrib/mesos/pkg/scheduler/podtask/pod_task.go
@@ -188,6 +188,19 @@ func (t *T) BuildTaskInfo() (*mesos.TaskInfo, error) {
                return nil, errors.New("no podtask.T.Spec given, cannot build task info")
        }
 
+        revocableEnabled := t.revocableEnabled()
+       if revocableEnabled {
+           log.V(3).Infof("gyliu: Need set revocable info for pod %v", t.Pod.Name)
+           for _, r := range t.Spec.Resources {
+               if r.GetScalar().GetValue() > 0 {
+                 log.V(3).Infof("gyliu: Setting revocable info for resource %+v", r)
+                 r.Revocable = &mesos.Resource_RevocableInfo{}
+               } else {
+                 log.V(3).Infof("gyliu: Resource %+v is not a scalar resources", r)
+               }
+           }
+       }
+
        info := &mesos.TaskInfo{
                Name:      proto.String(generateTaskName(&t.Pod)),
                TaskId:    mutil.NewTaskID(t.ID),
@@ -247,6 +260,15 @@ func (t *T) Roles() (result []string) {
        return t.DefaultPodRoles
 }
 
+func (t *T) revocableEnabled() bool {
+       if r, ok := t.Pod.ObjectMeta.Annotations[mesosmeta.Roles2Key]; ok {
+            log.V(3).Infof("Enabling Revocable in Pod %v value %v", t.Pod.Name, r)
+           return true
+       }
+       log.V(3).Infof("gyliu: NOT enabling Revocable in Pod %v", t.Pod.Name)
+       return false
+}
+
 func New(ctx api.Context, config Config, pod *api.Pod) (*T, error) {
        if config.Prototype == nil {
                return nil, fmt.Errorf("illegal argument: executor-info prototype is nil")
diff --git a/contrib/mesos/pkg/scheduler/podtask/procurement.go b/contrib/mesos/pkg/scheduler/podtask/procurement.go
index 78f482b..7d67b01 100644
--- a/contrib/mesos/pkg/scheduler/podtask/procurement.go
+++ b/contrib/mesos/pkg/scheduler/podtask/procurement.go
@@ -172,16 +172,18 @@ func NewPodResourcesProcurement() Procurement {
                        t.Pod.Namespace, t.Pod.Name, wantedCpus, wantedMem,
                )
 
+                revocableEnabled := t.revocableEnabled()
                podRoles := t.Roles()
-               procuredCpu, remaining := procureScalarResources("cpus", wantedCpus, podRoles, ps.offer.GetResources())
+               procuredCpu, remaining := procureScalarResources("cpus", wantedCpus, podRoles, ps.offer.GetResources(), revocableEnabled)
                if procuredCpu == nil {
                        return fmt.Errorf(
                                "not enough cpu resources for pod %s/%s: want=%v",
                                t.Pod.Namespace, t.Pod.Name, wantedCpus,
                        )
                }
+                log.V(1).Infof("gyliu: procuredCpu %+v remaining %+v", procuredCpu, remaining)
 
-               procuredMem, remaining := procureScalarResources("mem", wantedMem, podRoles, remaining)
+               procuredMem, remaining := procureScalarResources("mem", wantedMem, podRoles, remaining, revocableEnabled)
                if procuredMem == nil {
                        return fmt.Errorf(
                                "not enough mem resources for pod %s/%s: want=%v",
@@ -189,6 +191,8 @@ func NewPodResourcesProcurement() Procurement {
                        )
                }
 
+                log.V(1).Infof("gyliu: procuredMem %+v remaining %+v", procuredMem, remaining)
+
                ps.offer.Resources = remaining
                ps.spec.Resources = append(ps.spec.Resources, append(procuredCpu, procuredMem...)...)
                return nil
@@ -228,16 +232,24 @@ func NewExecutorResourceProcurer(rs []*mesos.Resource, registry executorinfo.Reg
                        wantedCpus := resources.Sum(resources.Filter(rs, resources.IsScalar, resources.HasName("cpus")))
                        wantedMem := resources.Sum(resources.Filter(rs, resources.IsScalar, resources.HasName("mem")))
 
-                       procuredCpu, remaining := procureScalarResources("cpus", wantedCpus, t.FrameworkRoles, ps.offer.GetResources())
+                        
+                        log.V(1).Infof("gyliu: NewExecutorResourceProcurer with revocable with offer %+v", ps.offer)
+                        log.V(1).Infof("gyliu: want cpus %v mem %v", wantedCpus, wantedMem)
+                        revocableEnabled := t.revocableEnabled()
+                       procuredCpu, remaining := procureScalarResources("cpus", wantedCpus, t.FrameworkRoles, ps.offer.GetResources(), revocableEnabled)
                        if procuredCpu == nil {
+                                log.V(1).Infof("gyliu: cpu is empty")
                                return fmt.Errorf("not enough cpu resources for executor: want=%v", wantedCpus)
                        }
-
-                       procuredMem, remaining := procureScalarResources("mem", wantedMem, t.FrameworkRoles, remaining)
+                          
+                        log.V(1).Infof("gyliu: procuredCpu %+v remaining %+v", procuredCpu, remaining)
+                       procuredMem, remaining := procureScalarResources("mem", wantedMem, t.FrameworkRoles, remaining, revocableEnabled)
                        if procuredMem == nil {
+                                log.V(1).Infof("gyliu: memory is empty")
                                return fmt.Errorf("not enough mem resources for executor: want=%v", wantedMem)
                        }
 
+                        log.V(1).Infof("gyliu: procuredMem %+v remaining %+v", procuredMem, remaining)
                        ps.offer.Resources = remaining
                        ps.spec.Executor = registry.New(ps.offer.GetHostname(), append(procuredCpu, procuredMem...))
                        return nil
@@ -272,14 +284,28 @@ func procureScalarResources(
        want float64,
        roles []string,
        offered []*mesos.Resource,
+        revocableEnabled bool,
 ) (procured, remaining []*mesos.Resource) {
        sorted := resources.ByRoles(roles...).Sort(offered)
        procured = make([]*mesos.Resource, 0, len(sorted))
        remaining = make([]*mesos.Resource, 0, len(sorted))
 
        for _, r := range sorted {
+                left := epsilon
+                role := r.Role
                if want >= epsilon && resources.MatchesAll(r, resources.HasName(name), resources.IsScalar) {
-                       left, role := r.GetScalar().GetValue(), r.Role
+                        if revocableEnabled {
+                            log.V(1).Infof("gyliu: procureScalarResources with revocable")
+                            if r.GetRevocable() != nil {
+                              left, role = r.GetScalar().GetValue(), r.Role
+                              log.V(1).Infof("gyliu: Current resources %+v", r)
+                              log.V(1).Infof("gyliu: GOT revocable resources %v with value %v", name, r.GetScalar().GetValue())
+                            } else {
+                              log.V(1).Infof("gyliu: NO revocable <<<<< for %v with resources %+v", name, r)
+                            }
+                        } else {
+                            left, role = r.GetScalar().GetValue(), r.Role
+                        }
                        consumed := math.Min(want, left)
 
                        want -= consumed
@@ -287,11 +313,17 @@ func procureScalarResources(
 
                        if left >= epsilon {
                                r = mesosutil.NewScalarResource(name, left)
+                                if revocableEnabled {
+                                    r.Revocable = &mesos.Resource_RevocableInfo{}
+                                }
                                r.Role = role
                                remaining = append(remaining, r)
                        }
 
                        consumedRes := mesosutil.NewScalarResource(name, consumed)
+                        if revocableEnabled {
+                            consumedRes.Revocable = &mesos.Resource_RevocableInfo{}
+                        }
                        consumedRes.Role = role
                        procured = append(procured, consumedRes)
                } else {
diff --git a/contrib/mesos/pkg/scheduler/podtask/procurement_test.go b/contrib/mesos/pkg/scheduler/podtask/procurement_test.go
index cb01f23..60601bd 100644
--- a/contrib/mesos/pkg/scheduler/podtask/procurement_test.go
+++ b/contrib/mesos/pkg/scheduler/podtask/procurement_test.go
@@ -204,7 +204,7 @@ func TestProcureRoleResources(t *testing.T) {
                        consumed: nil, left: nil,
                },
        } {
-               consumed, remaining := procureScalarResources(tt.name, tt.want, tt.roles, tt.offered)
+               consumed, remaining := procureScalarResources(tt.name, tt.want, tt.roles, tt.offered, false)
 
                if !reflect.DeepEqual(consumed, tt.consumed) {
                        t.Errorf("test #%d (consumed):\ngot  %v\nwant %v", i, consumed, tt.consumed)
diff --git a/contrib/mesos/pkg/scheduler/service/service.go b/contrib/mesos/pkg/scheduler/service/service.go
index e969784..41cb752 100644
--- a/contrib/mesos/pkg/scheduler/service/service.go
+++ b/contrib/mesos/pkg/scheduler/service/service.go
@@ -109,6 +109,7 @@ type SchedulerServer struct {
        kubeconfig            string
        kubeAPIQPS            float32
        kubeAPIBurst          int
+        enableRevocable       bool
        apiServerList         []string
        etcdServerList        []string
        allowPrivileged       bool
@@ -217,6 +218,7 @@ func NewSchedulerServer() *SchedulerServer {
                mesosAuthProvider:              sasl.ProviderName,
                mesosCgroupPrefix:              minioncfg.DefaultCgroupPrefix,
                mesosMaster:                    defaultMesosMaster,
+                enableRevocable:                false,
                mesosUser:                      defaultMesosUser,
                mesosExecutorCPUs:              defaultExecutorCPUs,
                mesosExecutorMem:               defaultExecutorMem,
@@ -258,6 +260,7 @@ func (s *SchedulerServer) addCoreFlags(fs *pflag.FlagSet) {
        fs.IPVar(&s.address, "address", s.address, "The IP address to serve on (set to 0.0.0.0 for all interfaces)")
        fs.BoolVar(&s.enableProfiling, "profiling", s.enableProfiling, "Enable profiling via web interface host:port/debug/pprof/")
        fs.StringSliceVar(&s.apiServerList, "api-servers", s.apiServerList, "List of Kubernetes API servers for publishing events, and reading pods and services. (ip:port), comma separated.")
+        fs.BoolVar(&s.enableRevocable, "enable-revocable", s.enableRevocable, "Enable Revocable Resources.")
        fs.StringVar(&s.kubeconfig, "kubeconfig", s.kubeconfig, "Path to kubeconfig file with authorization and master location information.")
        fs.Float32Var(&s.kubeAPIQPS, "kube-api-qps", s.kubeAPIQPS, "QPS to use while talking with kubernetes apiserver")
        fs.IntVar(&s.kubeAPIBurst, "kube-api-burst", s.kubeAPIBurst, "Burst to use while talking with kubernetes apiserver")
@@ -986,6 +989,13 @@ func (s *SchedulerServer) buildFrameworkInfo() (info *mesos.FrameworkInfo, cred
                info.FailoverTimeout = proto.Float64(s.failoverTimeout)
        }
 
+        if s.enableRevocable {
+           log.V(2).Infof("Enabling Revocable>>>>>>>>>>>>>>>")
+            info.Capabilities = make([]*mesos.FrameworkInfo_Capability, 1)
+            info.Capabilities[0] = &mesos.FrameworkInfo_Capability{
+                Type: mesos.FrameworkInfo_Capability_REVOCABLE_RESOURCES.Enum()}
+       }
+
        // set the framework's role to the first configured non-star role.
        // once Mesos supports multiple roles simply set the configured mesos roles slice.
        for _, role := range s.frameworkRoles {
